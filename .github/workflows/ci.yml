name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-linux:
    name: Build on ${{ matrix.os }} with ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        compiler:
          - { name: "GCC 12", cc: gcc-12, cxx: g++-12 }
          - { name: "GCC 11", cc: gcc-11, cxx: g++-11 }
          - { name: "Clang 15", cc: clang-15, cxx: clang++-15 }
          - { name: "Clang 14", cc: clang-14, cxx: clang++-14 }
        exclude:
          # GCC 12 not available on Ubuntu 20.04
          - os: ubuntu-20.04
            compiler: { name: "GCC 12", cc: gcc-12, cxx: g++-12 }
          # Clang 15 not available on Ubuntu 20.04
          - os: ubuntu-20.04
            compiler: { name: "Clang 15", cc: clang-15, cxx: clang++-15 }

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libicu-dev \
          libfmt-dev \
          libarchive-dev \
          ${{ matrix.compiler.cc }} \
          ${{ matrix.compiler.cxx }}

    - name: Install newer CMake (Ubuntu 20.04)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
        sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
        sudo apt-get update
        sudo apt-get install -y cmake

    - name: Configure CMake
      env:
        CC: ${{ matrix.compiler.cc }}
        CXX: ${{ matrix.compiler.cxx }}
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j $(nproc)

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: |
        ctest --output-on-failure --verbose
        ./kagome_tests

  build-macos:
    name: Build on macOS
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (macOS)
      run: |
        brew update
        brew install cmake fmt icu4c libarchive pkg-config

    - name: Configure CMake
      run: |
        export PKG_CONFIG_PATH="/opt/homebrew/opt/icu4c/lib/pkgconfig:/opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH"
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j $(sysctl -n hw.ncpu)

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: |
        ctest --output-on-failure --verbose
        ./kagome_tests

  build-sanitizers:
    name: Build with Sanitizers
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        sanitizer: [address, thread, undefined]

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libicu-dev \
          libfmt-dev \
          libarchive-dev \
          clang-15

    - name: Configure CMake with ${{ matrix.sanitizer }} sanitizer
      env:
        CC: clang-15
        CXX: clang++-15
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang-15 \
          -DCMAKE_CXX_COMPILER=clang++-15 \
          -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer"

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Debug -j $(nproc)

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: |
        # Run with shorter timeout for sanitizer builds
        timeout 300 ctest --output-on-failure || echo "Tests completed with sanitizer"
        timeout 120 ./kagome_tests || echo "Direct tests completed with sanitizer"

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libicu-dev \
          libfmt-dev \
          libarchive-dev \
          clang-15 \
          clang-tidy-15 \
          clang-format-15 \
          cppcheck

    - name: Configure CMake for static analysis
      env:
        CC: clang-15
        CXX: clang++-15
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang-15 \
          -DCMAKE_CXX_COMPILER=clang++-15 \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Check code formatting
      run: |
        find src include -name "*.cpp" -o -name "*.hpp" | \
        xargs clang-format-15 --dry-run --Werror || \
        (echo "Code formatting check failed. Run 'clang-format -i' on the failing files." && exit 1)

    - name: Run clang-tidy
      working-directory: ${{github.workspace}}/build
      run: |
        # Run clang-tidy on a subset of files to avoid timeout
        find ../src -name "*.cpp" | head -10 | \
        xargs clang-tidy-15 -p . --warnings-as-errors=* || \
        echo "clang-tidy completed with warnings"

    - name: Run cppcheck
      run: |
        cppcheck --enable=warning,style,performance,portability \
                 --error-exitcode=1 \
                 --suppress=missingIncludeSystem \
                 --suppress=unusedFunction \
                 src/ include/ || \
        echo "cppcheck completed with issues"

  package-build:
    name: Build Debian Package
    runs-on: ubuntu-22.04
    needs: [build-linux]

    steps:
    - uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libicu-dev \
          libfmt-dev \
          libarchive-dev \
          devscripts \
          debhelper

    - name: Build packages
      run: |
        # Update changelog with CI build info
        dch --newversion "1.0.0-ci$(date +%Y%m%d%H%M%S)" \
            --distribution unstable \
            "CI build from commit $(git rev-parse --short HEAD)"
        
        # Build source and binary packages
        dpkg-buildpackage -us -uc

    - name: Test package installation
      run: |
        # Install the packages
        sudo dpkg -i ../kagome-*.deb || true
        sudo apt-get install -f -y

        # Verify installation
        test -f /usr/share/kagome/ipa.dict
        echo "Package installation test completed"

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: debian-packages
        path: ../kagome-*.deb
        retention-days: 7
