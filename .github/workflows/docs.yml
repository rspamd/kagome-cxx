name: Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**.md'
      - 'docs/**'

jobs:
  check-links:
    name: Check Documentation Links
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
    
    - name: Install markdown-link-check
      run: npm install -g markdown-link-check
    
    - name: Check links in documentation
      run: |
        # Check all markdown files for broken links
        find . -name "*.md" -not -path "./build/*" -not -path "./.git/*" | \
        xargs -I {} markdown-link-check {} --config .github/markdown-link-check.json || true

  lint-markdown:
    name: Lint Markdown
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
    
    - name: Install markdownlint
      run: npm install -g markdownlint-cli
    
    - name: Lint markdown files
      run: |
        markdownlint *.md --ignore node_modules --ignore build || true

  validate-package-docs:
    name: Validate Package Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check required documentation files
      run: |
        # Check that all required documentation exists
        required_files=(
          "README.md"
          "LICENSE" 
          "CONTRIBUTING.md"
          "CHANGELOG.md"
          "RSPAMD_INTEGRATION.md"
          "DICTIONARY.md"
          "BUILD.md"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
          fi
        done
        
        if [[ ${#missing_files[@]} -gt 0 ]]; then
          echo "Missing required documentation files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        fi
        
        echo "All required documentation files present ✓"
    
    - name: Validate README structure
      run: |
        # Check that README has required sections
        required_sections=(
          "# Kagome C++"
          "## Features"
          "## Dependencies" 
          "## Building"
          "## Usage"
          "## Rspamd Integration"
          "## License"
          "## Acknowledgments"
        )
        
        for section in "${required_sections[@]}"; do
          if ! grep -q "^$section" README.md; then
            echo "Missing required section in README.md: $section"
            exit 1
          fi
        done
        
        echo "README.md structure validation passed ✓"
    
    - name: Check package documentation consistency
      run: |
        # Verify that package names in documentation match debian/control
        if [[ -f "debian/control" ]]; then
          packages=$(grep "^Package:" debian/control | cut -d' ' -f2)
          echo "Packages defined in debian/control:"
          echo "$packages"
          
          # Check that main packages are mentioned in README
          echo "Checking package mentions in README..."
          if ! grep -q "kagome-rspamd-tokenizer" README.md; then
            echo "Warning: kagome-rspamd-tokenizer not mentioned in README.md"
          fi
          
          if ! grep -q "kagome-dict-ipa" README.md; then
            echo "Warning: kagome-dict-ipa not mentioned in README.md" 
          fi
        fi
        
        echo "Package documentation consistency check completed ✓"